(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := HMI_STOP ;
__EDTB2 := __EDTB1 ;
IF __EDTB2 THEN
(*Reset coil*)
HMI_STARTEXECUTEMOTION := FALSE ;
END_IF ;
__EDTB3 := __EDTB1 ;
IF __EDTB3 THEN
(*Reset coil*)
HMI_VIS_FWD := FALSE ;
END_IF ;
__EDTB4 := __EDTB1 ;
IF __EDTB4 THEN
(*Reset coil*)
HMI_VIS_REV := FALSE ;
END_IF ;
__EDTB5 := __EDTB1 ;
IF __EDTB5 THEN
(*Set coil*)
B_STARTHOMING := TRUE ;
END_IF ;
__EDTB7 := __EDTB1 ;
IF __EDTB7 THEN
(* Operator output on : >= with __EDTB6 *)
__EDTB6 := (HSC_INFO.ACCUMULATOR >= CONST_BOTTOM_HSC_COUNT) ;
ELSE
__EDTB6 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB6 ;
__EDTB8 := __EDTB6 ;
IF __EDTB8 THEN
(*Set coil*)
B_LIFTHOMED := TRUE ;
END_IF ;
__EDTB9 := __EDTB6 ;
IF __EDTB9 THEN
(*Reset coil*)
B_MOVELIFTDOWN := FALSE ;
END_IF ;
__EDTB10 := __EDTB6 ;
IF __EDTB10 THEN
(*Set coil*)
B_MOVELIFTUP := TRUE ;
END_IF ;
__EDTB11 := __EDTB6 ;
IF __EDTB11 THEN
(*Reset coil*)
B_STARTLIFTMOVEVELOCITY := FALSE ;
END_IF ;
__EDTB12 := __EDTB6 ;
IF __EDTB12 THEN
(*Set coil*)
B_STOPLIFT := TRUE ;
END_IF ;
__EDTB14 := __EDTB1 ;
IF __EDTB14 THEN
(* Operator output on : < with __EDTB13 *)
__EDTB13 := (HSC_INFO.ACCUMULATOR < CONST_BOTTOM_HSC_COUNT) ;
ELSE
__EDTB13 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB13 ;
__EDTB15 := __EDTB13 ;
IF __EDTB15 THEN
(*Reset coil*)
B_LIFTHOMED := FALSE ;
END_IF ;
__EDTB16 := __EDTB13 ;
IF __EDTB16 THEN
(*Set coil*)
B_MOVELIFTDOWN := TRUE ;
END_IF ;
__EDTB17 := __EDTB13 ;
IF __EDTB17 THEN
(*Reset coil*)
B_MOVELIFTUP := FALSE ;
END_IF ;
__EDTB18 := __EDTB13 ;
IF __EDTB18 THEN
(*Set coil*)
B_STARTLIFTMOVEVELOCITY := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,15
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB19 := B_STARTHOMING ;
__EDTB20 := __EDTB19 AND B_LIFTHOMED ;
IF __EDTB20 THEN
(*Set coil*)
B_SYS_STOPPED := TRUE ;
END_IF ;
__EDTB21 := __EDTB19 AND NOT(B_LIFTHOMED) ;
IF __EDTB21 THEN
(*Reset coil*)
B_SYS_STOPPED := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,18
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: R_TRIG *)
R_TRIG_1(B_SYS_STOPPED) ;
__EDTB22 := R_TRIG_1.Q ;
__EDTB23 := __EDTB22 ;
IF __EDTB23 THEN
(*Reset coil*)
HMI_STOP := FALSE ;
END_IF ;
__EDTB24 := __EDTB22 ;
IF __EDTB24 THEN
(*Set coil*)
HMI_VIS_START := TRUE ;
END_IF ;
__EDTB25 := __EDTB22 ;
IF __EDTB25 THEN
(*Set coil*)
HMI_VIS_FWD := TRUE ;
END_IF ;
__EDTB26 := __EDTB22 ;
IF __EDTB26 THEN
(*Set coil*)
HMI_VIS_REV := TRUE ;
END_IF ;
__EDTB27 := __EDTB22 ;
IF __EDTB27 THEN
(*Reset coil*)
HMI_VIS_STOP := FALSE ;
END_IF ;
__EDTB28 := __EDTB22 ;
IF __EDTB28 THEN
(*Reset coil*)
B_STARTHOMING := FALSE ;
END_IF ;
__EDTB29 := __EDTB22 ;
IF __EDTB29 THEN
HMI_IND_LIFT_DIR := (  2) ;
END_IF ;
__MO_1GAIN_1 := __EDTB29 ;
__EDTB30 := __EDTB29 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)

