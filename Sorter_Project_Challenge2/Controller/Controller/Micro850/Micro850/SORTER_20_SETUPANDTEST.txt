(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := __SYSVA_FIRST_SCAN ;
IF __EDTB1 THEN
(*Reset coil*)
LOCAL_B_CFG_LIFTMOVETOTOP := FALSE ;
END_IF ;
__EDTB2 := __SYSVA_FIRST_SCAN ;
IF __EDTB2 THEN
(*Reset coil*)
LOCAL_B_CFG_LIFTMOVETOBOTTOM := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,4
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB3 := LOCAL_B_CFG_LIFTMOVETOTOP AND B_AXIS3_POWERED ;
__EDTB4 := __EDTB3 ;
IF __EDTB4 THEN
(*Set coil*)
_IO_EM_DO_18 := TRUE ;
END_IF ;
__EDTB5 := __EDTB3 ;
IF __EDTB5 THEN
(*Reset coil*)
_IO_EM_DO_19 := FALSE ;
END_IF ;
__EDTB6 := __EDTB3 ;
IF __EDTB6 THEN
(*Reset coil*)
B_HSC_ENABLE := FALSE ;
END_IF ;
__EDTB7 := __EDTB3 ;
IF __EDTB7 THEN
(*Set coil*)
B_STARTLIFTMOVEVELOCITY := TRUE ;
END_IF ;
(* FB call: HSC *)
HSC_1(__EDTB3, 2, HSC_APPDATA, HSC_INFO, HSC_PLS, 0) ;
HSC_STATUS := HSC_1.Sts ;
__MO_HSC_1 := __EDTB3 ;
__EDTB8 := __EDTB3 ;
__EDTB9 := __EDTB3 ;
IF __EDTB9 THEN
(*Reset coil*)
LOCAL_B_CFG_LIFTMOVETOTOP := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := LOCAL_B_CFG_LIFTMOVETOBOTTOM AND B_AXIS3_POWERED ;
__EDTB11 := __EDTB10 ;
IF __EDTB11 THEN
(*Set coil*)
_IO_EM_DO_19 := TRUE ;
END_IF ;
__EDTB12 := __EDTB10 ;
IF __EDTB12 THEN
(*Reset coil*)
_IO_EM_DO_18 := FALSE ;
END_IF ;
__EDTB13 := __EDTB10 ;
IF __EDTB13 THEN
(*Reset coil*)
B_HSC_ENABLE := FALSE ;
END_IF ;
__EDTB14 := __EDTB10 ;
IF __EDTB14 THEN
(*Set coil*)
B_STARTLIFTMOVEVELOCITY := TRUE ;
END_IF ;
(* FB call: HSC *)
HSC_2(__EDTB10, 2, HSC_APPDATA, HSC_INFO, HSC_PLS, 0) ;
HSC_STATUS := HSC_2.Sts ;
__MO_HSC_2 := __EDTB10 ;
__EDTB15 := __EDTB10 ;
__EDTB16 := __EDTB10 ;
IF __EDTB16 THEN
(*Reset coil*)
LOCAL_B_CFG_LIFTMOVETOBOTTOM := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,28
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := LOCAL_B_CFG_LIFTSTOP ;
IF __EDTB17 THEN
(*Reset coil*)
_IO_EM_DO_18 := FALSE ;
END_IF ;
__EDTB18 := LOCAL_B_CFG_LIFTSTOP ;
IF __EDTB18 THEN
(*Reset coil*)
_IO_EM_DO_19 := FALSE ;
END_IF ;
__EDTB19 := LOCAL_B_CFG_LIFTSTOP ;
IF __EDTB19 THEN
(*Reset coil*)
B_STARTLIFTMOVEVELOCITY := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,32
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB20 := TRUE ;
IF __EDTB20 THEN
(* FB call: MC_Halt *)
MC_Halt_1(AXIS3, LOCAL_B_CFG_LIFTSTOP, 5000.0, 0.0, ) ;
END_IF ;
__MO_MC_HALT_1 := __EDTB20 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,41
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB21 := LOCAL_B_CFG_LIFTSTOP AND MC_HALT_1.DONE ;
__EDTB22 := __EDTB21 ;
IF __EDTB22 THEN
(*Reset coil*)
LOCAL_B_CFG_LIFTSTOP := FALSE ;
END_IF ;
__EDTB23 := __EDTB21 ;
IF __EDTB23 THEN
HSC_APPDATA.ACCUMULATOR := (  0) ;
END_IF ;
__MO_1GAIN_1 := __EDTB23 ;
__EDTB24 := __EDTB23 ;
(* FB call: HSC *)
HSC_3(__EDTB21, 4, HSC_APPDATA, HSC_INFO, HSC_PLS, 0) ;
HSC_STATUS := HSC_3.Sts ;
__MO_HSC_3 := __EDTB21 ;
__EDTB25 := __EDTB21 ;
__EDTB26 := __EDTB21 ;
IF __EDTB26 THEN
(*Set coil*)
B_HSC_ENABLE := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)

