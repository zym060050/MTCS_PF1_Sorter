(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: R_TRIG *)
R_TRIG_1(B_SYS_INITIALIZED AND HMI_PLACEORDER) ;
__EDTB1 := R_TRIG_1.Q ;
__EDTB2 := __EDTB1 AND NOT(B_ORDERFIFOFULL) ;
__EDTB3 := __EDTB2 ;
IF __EDTB3 THEN
(*Set coil*)
B_EXEC_ORDER_FFL := TRUE ;
END_IF ;
__EDTB4 := __EDTB2 ;
IF __EDTB4 THEN
(*Set coil*)
LOCAL_B_CHECKFORORDEREMPTY := TRUE ;
END_IF ;
__EDTB5 := __EDTB2 ;
IF __EDTB5 THEN
(*Reset coil*)
HMI_B_ORDERLISTFULL := FALSE ;
END_IF ;
__EDTB6 := __EDTB1 AND B_ORDERFIFOFULL ;
__EDTB7 := __EDTB6 ;
IF __EDTB7 THEN
(*Set coil*)
HMI_B_ORDERLISTFULL := TRUE ;
END_IF ;
__EDTB8 := __EDTB6 ;
IF __EDTB8 THEN
(*Reset coil*)
HMI_ACKALARM := FALSE ;
END_IF ;
__EDTB9 := __EDTB1 ;
IF __EDTB9 THEN
(*Reset coil*)
HMI_PLACEORDER := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,8
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := LOCAL_B_CHECKFORORDEREMPTY ;
IF __EDTB10 THEN
(* FB call: UDFB_ORDER_NOT_EMPTY *)
UDFB_ORDER_NOT_EMPTY_1(ARRAY_ORDERTOBEPLACED) ;
__EDTB11 := UDFB_ORDER_NOT_EMPTY_1.UDFB_OUT_ORDER_NOT_EMPTY ;
ELSE
__EDTB11 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,11
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB12 := LOCAL_B_CHECKFORORDEREMPTY ;
__EDTB13 := __EDTB12 AND UDFB_ORDER_NOT_EMPTY_1.UDFB_OUT_ORDER_NOT_EMPTY ;
IF __EDTB13 THEN
(*Reset coil*)
HMI_B_ORDEREMPTYINVALID := FALSE ;
END_IF ;
__EDTB14 := __EDTB12 AND NOT(UDFB_ORDER_NOT_EMPTY_1.UDFB_OUT_ORDER_NOT_EMPTY) ;
__EDTB15 := __EDTB14 ;
IF __EDTB15 THEN
(*Set coil*)
HMI_B_ORDEREMPTYINVALID := TRUE ;
END_IF ;
__EDTB16 := __EDTB14 ;
IF __EDTB16 THEN
(*Reset coil*)
HMI_ACKALARM := FALSE ;
END_IF ;
__EDTB17 := __EDTB14 ;
IF __EDTB17 THEN
(*Reset coil*)
B_EXEC_ORDER_FFL := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB18 := TRUE ;
IF __EDTB18 THEN
(*Reset coil*)
LOCAL_B_CHECKFORORDEREMPTY := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,18
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB19 := TRUE ;
IF __EDTB19 THEN
(* FB call: UDFB_ORDER_FFL *)
UDFB_ORDER_FFL_1(ARRAY_ORDERTOBEPLACED) ;
END_IF ;
__MO_UDFB_ORDER_FFL_1 := __EDTB19 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,21
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB20 := NOT(B_ORDERFIFOEMPTY) ;
__EDTB22 := __EDTB20 ;
IF __EDTB22 THEN
(* Operator output on : < with __EDTB21 *)
__EDTB21 := (SYSTEM_STATE < 2) ;
ELSE
__EDTB21 := FALSE ;
END_IF ;
__MO_LESS_1 := __EDTB21 ;
__EDTB23 := __EDTB21 ;
IF __EDTB23 THEN
SYSTEM_STATE := (  2) ;
END_IF ;
__MO_1GAIN_1 := __EDTB23 ;
__EDTB24 := __EDTB23 ;
__EDTB26 := __EDTB20 ;
IF __EDTB26 THEN
(* Operator output on : = with __EDTB25 *)
__EDTB25 := (SYSTEM_STATE = 2) ;
ELSE
__EDTB25 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB25 ;
__EDTB27 := __EDTB25 ;
__EDTB29 := __EDTB20 ;
IF __EDTB29 THEN
(* Operator output on : = with __EDTB28 *)
__EDTB28 := (SYSTEM_STATE = 3) ;
ELSE
__EDTB28 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB28 ;
__EDTB30 := __EDTB28 ;
__EDTB31 := (__EDTB27 OR __EDTB30) ;
IF __EDTB31 THEN
(*Set coil*)
HMI_STARTEXECUTEMOTION := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)

