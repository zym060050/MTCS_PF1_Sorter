(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := __SYSVA_FIRST_SCAN ;
IF __EDTB1 THEN
LOCAL_COUNTER := (  8) ;
END_IF ;
__MO_1GAIN_1 := __EDTB1 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,4
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
TON_1(NOT(B_TOGGLE), T#1S) ;
B_TOGGLE := TON_1.Q ;
__EDTB2 := TON_1.Q ;
IF __EDTB2 THEN
LOCAL_COUNTER := (LOCAL_COUNTER + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB2 ;
__EDTB3 := __EDTB2 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,9
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB5 := TRUE ;
IF __EDTB5 THEN
(* Operator output on : > with __EDTB4 *)
__EDTB4 := (LOCAL_COUNTER > 15) ;
ELSE
__EDTB4 := FALSE ;
END_IF ;
__MO_GREAT_1 := __EDTB4 ;
__EDTB6 := __EDTB4 ;
IF __EDTB6 THEN
LOCAL_COUNTER := (  8) ;
END_IF ;
__MO_1GAIN_2 := __EDTB6 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB8 := TRUE ;
IF __EDTB8 THEN
(* Operator output on : = with __EDTB7 *)
__EDTB7 := (LOCAL_COUNTER = 8) ;
ELSE
__EDTB7 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB7 ;
__EDTB9 := __EDTB7 ;
IF __EDTB9 THEN
(*Set coil*)
_IO_X2_DO_08 := TRUE ;
END_IF ;
__EDTB10 := __EDTB7 ;
IF __EDTB10 THEN
(*Reset coil*)
_IO_X2_DO_09 := FALSE ;
END_IF ;
__EDTB11 := __EDTB7 ;
IF __EDTB11 THEN
(*Reset coil*)
_IO_X2_DO_10 := FALSE ;
END_IF ;
__EDTB12 := __EDTB7 ;
IF __EDTB12 THEN
(*Reset coil*)
_IO_X2_DO_11 := FALSE ;
END_IF ;
__EDTB13 := __EDTB7 ;
IF __EDTB13 THEN
(*Reset coil*)
_IO_X2_DO_12 := FALSE ;
END_IF ;
__EDTB14 := __EDTB7 ;
IF __EDTB14 THEN
(*Reset coil*)
_IO_X2_DO_13 := FALSE ;
END_IF ;
__EDTB15 := __EDTB7 ;
IF __EDTB15 THEN
(*Reset coil*)
_IO_X2_DO_14 := FALSE ;
END_IF ;
__EDTB16 := __EDTB7 ;
IF __EDTB16 THEN
(*Reset coil*)
_IO_X2_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,22
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB18 := TRUE ;
IF __EDTB18 THEN
(* Operator output on : = with __EDTB17 *)
__EDTB17 := (LOCAL_COUNTER = 9) ;
ELSE
__EDTB17 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB17 ;
__EDTB19 := __EDTB17 ;
IF __EDTB19 THEN
(*Reset coil*)
_IO_X2_DO_08 := FALSE ;
END_IF ;
__EDTB20 := __EDTB17 ;
IF __EDTB20 THEN
(*Set coil*)
_IO_X2_DO_09 := TRUE ;
END_IF ;
__EDTB21 := __EDTB17 ;
IF __EDTB21 THEN
(*Reset coil*)
_IO_X2_DO_10 := FALSE ;
END_IF ;
__EDTB22 := __EDTB17 ;
IF __EDTB22 THEN
(*Reset coil*)
_IO_X2_DO_11 := FALSE ;
END_IF ;
__EDTB23 := __EDTB17 ;
IF __EDTB23 THEN
(*Reset coil*)
_IO_X2_DO_12 := FALSE ;
END_IF ;
__EDTB24 := __EDTB17 ;
IF __EDTB24 THEN
(*Reset coil*)
_IO_X2_DO_13 := FALSE ;
END_IF ;
__EDTB25 := __EDTB17 ;
IF __EDTB25 THEN
(*Reset coil*)
_IO_X2_DO_14 := FALSE ;
END_IF ;
__EDTB26 := __EDTB17 ;
IF __EDTB26 THEN
(*Reset coil*)
_IO_X2_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,31
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB28 := TRUE ;
IF __EDTB28 THEN
(* Operator output on : = with __EDTB27 *)
__EDTB27 := (LOCAL_COUNTER = 10) ;
ELSE
__EDTB27 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB27 ;
__EDTB29 := __EDTB27 ;
IF __EDTB29 THEN
(*Reset coil*)
_IO_X2_DO_08 := FALSE ;
END_IF ;
__EDTB30 := __EDTB27 ;
IF __EDTB30 THEN
(*Reset coil*)
_IO_X2_DO_09 := FALSE ;
END_IF ;
__EDTB31 := __EDTB27 ;
IF __EDTB31 THEN
(*Set coil*)
_IO_X2_DO_10 := TRUE ;
END_IF ;
__EDTB32 := __EDTB27 ;
IF __EDTB32 THEN
(*Reset coil*)
_IO_X2_DO_11 := FALSE ;
END_IF ;
__EDTB33 := __EDTB27 ;
IF __EDTB33 THEN
(*Reset coil*)
_IO_X2_DO_12 := FALSE ;
END_IF ;
__EDTB34 := __EDTB27 ;
IF __EDTB34 THEN
(*Reset coil*)
_IO_X2_DO_13 := FALSE ;
END_IF ;
__EDTB35 := __EDTB27 ;
IF __EDTB35 THEN
(*Reset coil*)
_IO_X2_DO_14 := FALSE ;
END_IF ;
__EDTB36 := __EDTB27 ;
IF __EDTB36 THEN
(*Reset coil*)
_IO_X2_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,40
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB38 := TRUE ;
IF __EDTB38 THEN
(* Operator output on : = with __EDTB37 *)
__EDTB37 := (LOCAL_COUNTER = 11) ;
ELSE
__EDTB37 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB37 ;
__EDTB39 := __EDTB37 ;
IF __EDTB39 THEN
(*Reset coil*)
_IO_X2_DO_08 := FALSE ;
END_IF ;
__EDTB40 := __EDTB37 ;
IF __EDTB40 THEN
(*Reset coil*)
_IO_X2_DO_09 := FALSE ;
END_IF ;
__EDTB41 := __EDTB37 ;
IF __EDTB41 THEN
(*Reset coil*)
_IO_X2_DO_10 := FALSE ;
END_IF ;
__EDTB42 := __EDTB37 ;
IF __EDTB42 THEN
(*Set coil*)
_IO_X2_DO_11 := TRUE ;
END_IF ;
__EDTB43 := __EDTB37 ;
IF __EDTB43 THEN
(*Reset coil*)
_IO_X2_DO_12 := FALSE ;
END_IF ;
__EDTB44 := __EDTB37 ;
IF __EDTB44 THEN
(*Reset coil*)
_IO_X2_DO_13 := FALSE ;
END_IF ;
__EDTB45 := __EDTB37 ;
IF __EDTB45 THEN
(*Reset coil*)
_IO_X2_DO_14 := FALSE ;
END_IF ;
__EDTB46 := __EDTB37 ;
IF __EDTB46 THEN
(*Reset coil*)
_IO_X2_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,49
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB48 := TRUE ;
IF __EDTB48 THEN
(* Operator output on : = with __EDTB47 *)
__EDTB47 := (LOCAL_COUNTER = 12) ;
ELSE
__EDTB47 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB47 ;
__EDTB49 := __EDTB47 ;
IF __EDTB49 THEN
(*Reset coil*)
_IO_X2_DO_08 := FALSE ;
END_IF ;
__EDTB50 := __EDTB47 ;
IF __EDTB50 THEN
(*Reset coil*)
_IO_X2_DO_09 := FALSE ;
END_IF ;
__EDTB51 := __EDTB47 ;
IF __EDTB51 THEN
(*Reset coil*)
_IO_X2_DO_10 := FALSE ;
END_IF ;
__EDTB52 := __EDTB47 ;
IF __EDTB52 THEN
(*Reset coil*)
_IO_X2_DO_11 := FALSE ;
END_IF ;
__EDTB53 := __EDTB47 ;
IF __EDTB53 THEN
(*Set coil*)
_IO_X2_DO_12 := TRUE ;
END_IF ;
__EDTB54 := __EDTB47 ;
IF __EDTB54 THEN
(*Reset coil*)
_IO_X2_DO_13 := FALSE ;
END_IF ;
__EDTB55 := __EDTB47 ;
IF __EDTB55 THEN
(*Reset coil*)
_IO_X2_DO_14 := FALSE ;
END_IF ;
__EDTB56 := __EDTB47 ;
IF __EDTB56 THEN
(*Reset coil*)
_IO_X2_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,58
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB58 := TRUE ;
IF __EDTB58 THEN
(* Operator output on : = with __EDTB57 *)
__EDTB57 := (LOCAL_COUNTER = 13) ;
ELSE
__EDTB57 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB57 ;
__EDTB59 := __EDTB57 ;
IF __EDTB59 THEN
(*Reset coil*)
_IO_X2_DO_08 := FALSE ;
END_IF ;
__EDTB60 := __EDTB57 ;
IF __EDTB60 THEN
(*Reset coil*)
_IO_X2_DO_09 := FALSE ;
END_IF ;
__EDTB61 := __EDTB57 ;
IF __EDTB61 THEN
(*Reset coil*)
_IO_X2_DO_10 := FALSE ;
END_IF ;
__EDTB62 := __EDTB57 ;
IF __EDTB62 THEN
(*Reset coil*)
_IO_X2_DO_11 := FALSE ;
END_IF ;
__EDTB63 := __EDTB57 ;
IF __EDTB63 THEN
(*Reset coil*)
_IO_X2_DO_12 := FALSE ;
END_IF ;
__EDTB64 := __EDTB57 ;
IF __EDTB64 THEN
(*Set coil*)
_IO_X2_DO_13 := TRUE ;
END_IF ;
__EDTB65 := __EDTB57 ;
IF __EDTB65 THEN
(*Reset coil*)
_IO_X2_DO_14 := FALSE ;
END_IF ;
__EDTB66 := __EDTB57 ;
IF __EDTB66 THEN
(*Reset coil*)
_IO_X2_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,67
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB68 := TRUE ;
IF __EDTB68 THEN
(* Operator output on : = with __EDTB67 *)
__EDTB67 := (LOCAL_COUNTER = 14) ;
ELSE
__EDTB67 := FALSE ;
END_IF ;
__MO_EQUAL_7 := __EDTB67 ;
__EDTB69 := __EDTB67 ;
IF __EDTB69 THEN
(*Reset coil*)
_IO_X2_DO_08 := FALSE ;
END_IF ;
__EDTB70 := __EDTB67 ;
IF __EDTB70 THEN
(*Reset coil*)
_IO_X2_DO_09 := FALSE ;
END_IF ;
__EDTB71 := __EDTB67 ;
IF __EDTB71 THEN
(*Reset coil*)
_IO_X2_DO_10 := FALSE ;
END_IF ;
__EDTB72 := __EDTB67 ;
IF __EDTB72 THEN
(*Reset coil*)
_IO_X2_DO_11 := FALSE ;
END_IF ;
__EDTB73 := __EDTB67 ;
IF __EDTB73 THEN
(*Reset coil*)
_IO_X2_DO_12 := FALSE ;
END_IF ;
__EDTB74 := __EDTB67 ;
IF __EDTB74 THEN
(*Reset coil*)
_IO_X2_DO_13 := FALSE ;
END_IF ;
__EDTB75 := __EDTB67 ;
IF __EDTB75 THEN
(*Set coil*)
_IO_X2_DO_14 := TRUE ;
END_IF ;
__EDTB76 := __EDTB67 ;
IF __EDTB76 THEN
(*Reset coil*)
_IO_X2_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,76
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB78 := TRUE ;
IF __EDTB78 THEN
(* Operator output on : = with __EDTB77 *)
__EDTB77 := (LOCAL_COUNTER = 15) ;
ELSE
__EDTB77 := FALSE ;
END_IF ;
__MO_EQUAL_8 := __EDTB77 ;
__EDTB79 := __EDTB77 ;
IF __EDTB79 THEN
(*Reset coil*)
_IO_X2_DO_08 := FALSE ;
END_IF ;
__EDTB80 := __EDTB77 ;
IF __EDTB80 THEN
(*Reset coil*)
_IO_X2_DO_09 := FALSE ;
END_IF ;
__EDTB81 := __EDTB77 ;
IF __EDTB81 THEN
(*Reset coil*)
_IO_X2_DO_10 := FALSE ;
END_IF ;
__EDTB82 := __EDTB77 ;
IF __EDTB82 THEN
(*Reset coil*)
_IO_X2_DO_11 := FALSE ;
END_IF ;
__EDTB83 := __EDTB77 ;
IF __EDTB83 THEN
(*Reset coil*)
_IO_X2_DO_12 := FALSE ;
END_IF ;
__EDTB84 := __EDTB77 ;
IF __EDTB84 THEN
(*Reset coil*)
_IO_X2_DO_13 := FALSE ;
END_IF ;
__EDTB85 := __EDTB77 ;
IF __EDTB85 THEN
(*Reset coil*)
_IO_X2_DO_14 := FALSE ;
END_IF ;
__EDTB86 := __EDTB77 ;
IF __EDTB86 THEN
(*Set coil*)
_IO_X2_DO_15 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __EDTB52 *)
(* __EDTB53 *)
(* __EDTB54 *)
(* __EDTB55 *)
(* __EDTB56 *)
(* __EDTB57 *)
(* __EDTB58 *)
(* __EDTB59 *)
(* __EDTB60 *)
(* __EDTB61 *)
(* __EDTB62 *)
(* __EDTB63 *)
(* __EDTB64 *)
(* __EDTB65 *)
(* __EDTB66 *)
(* __EDTB67 *)
(* __EDTB68 *)
(* __EDTB69 *)
(* __EDTB70 *)
(* __EDTB71 *)
(* __EDTB72 *)
(* __EDTB73 *)
(* __EDTB74 *)
(* __EDTB75 *)
(* __EDTB76 *)
(* __EDTB77 *)
(* __EDTB78 *)
(* __EDTB79 *)
(* __EDTB80 *)
(* __EDTB81 *)
(* __EDTB82 *)
(* __EDTB83 *)
(* __EDTB84 *)
(* __EDTB85 *)
(* __EDTB86 *)

