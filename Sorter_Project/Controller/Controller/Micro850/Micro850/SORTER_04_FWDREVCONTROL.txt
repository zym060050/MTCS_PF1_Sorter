(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: R_TRIG *)
R_TRIG_1(HMI_MOVEFWD) ;
__EDTB1 := R_TRIG_1.Q ;
IF __EDTB1 THEN
(*Set coil*)
HMI_IND_FWDDIR := TRUE ;
END_IF ;
__EDTB2 := R_TRIG_1.Q ;
IF __EDTB2 THEN
(*Reset coil*)
HMI_IND_REVDIR := FALSE ;
END_IF ;
__EDTB3 := R_TRIG_1.Q ;
IF __EDTB3 THEN
(*Set coil*)
_IO_X1_DO_05 := TRUE ;
END_IF ;
__EDTB4 := R_TRIG_1.Q ;
IF __EDTB4 THEN
(*Reset coil*)
HMI_MOVEREV := FALSE ;
END_IF ;
__EDTB5 := R_TRIG_1.Q ;
IF __EDTB5 THEN
(*Reset coil*)
_IO_X1_DO_04 := FALSE ;
END_IF ;
__EDTB6 := R_TRIG_1.Q ;
IF __EDTB6 THEN
(*Set coil*)
_IO_X1_DO_00 := TRUE ;
END_IF ;
__EDTB7 := R_TRIG_1.Q ;
IF __EDTB7 THEN
(*Reset coil*)
_IO_X1_DO_01 := FALSE ;
END_IF ;
__EDTB8 := R_TRIG_1.Q ;
IF __EDTB8 THEN
(*Set coil*)
_IO_X1_DO_02 := TRUE ;
END_IF ;
__EDTB9 := R_TRIG_1.Q ;
IF __EDTB9 THEN
(*Reset coil*)
_IO_X1_DO_03 := FALSE ;
END_IF ;
__EDTB10 := R_TRIG_1.Q ;
IF __EDTB10 THEN
(*Set coil*)
_IO_X1_DO_06 := TRUE ;
END_IF ;
__EDTB11 := R_TRIG_1.Q ;
IF __EDTB11 THEN
(*Reset coil*)
_IO_X1_DO_07 := FALSE ;
END_IF ;
__EDTB12 := R_TRIG_1.Q ;
IF __EDTB12 THEN
(*Set coil*)
_IO_X1_DO_08 := TRUE ;
END_IF ;
__EDTB13 := R_TRIG_1.Q ;
IF __EDTB13 THEN
(*Reset coil*)
_IO_X1_DO_09 := FALSE ;
END_IF ;
__EDTB14 := R_TRIG_1.Q ;
IF __EDTB14 THEN
(*Set coil*)
_IO_X1_DO_12 := TRUE ;
END_IF ;
__EDTB15 := R_TRIG_1.Q ;
IF __EDTB15 THEN
(*Reset coil*)
_IO_X1_DO_13 := FALSE ;
END_IF ;
__EDTB16 := R_TRIG_1.Q ;
IF __EDTB16 THEN
(*Set coil*)
_IO_X1_DO_14 := TRUE ;
END_IF ;
__EDTB17 := R_TRIG_1.Q ;
IF __EDTB17 THEN
(*Reset coil*)
_IO_X1_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,19
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: R_TRIG *)
R_TRIG_2(HMI_MOVEREV) ;
__EDTB18 := R_TRIG_2.Q ;
IF __EDTB18 THEN
(*Set coil*)
HMI_IND_REVDIR := TRUE ;
END_IF ;
__EDTB19 := R_TRIG_2.Q ;
IF __EDTB19 THEN
(*Reset coil*)
HMI_IND_FWDDIR := FALSE ;
END_IF ;
__EDTB20 := R_TRIG_2.Q ;
IF __EDTB20 THEN
(*Set coil*)
_IO_X1_DO_04 := TRUE ;
END_IF ;
__EDTB21 := R_TRIG_2.Q ;
IF __EDTB21 THEN
(*Reset coil*)
HMI_MOVEFWD := FALSE ;
END_IF ;
__EDTB22 := R_TRIG_2.Q ;
IF __EDTB22 THEN
(*Reset coil*)
_IO_X1_DO_05 := FALSE ;
END_IF ;
__EDTB23 := R_TRIG_2.Q ;
IF __EDTB23 THEN
(*Set coil*)
_IO_X1_DO_01 := TRUE ;
END_IF ;
__EDTB24 := R_TRIG_2.Q ;
IF __EDTB24 THEN
(*Reset coil*)
_IO_X1_DO_00 := FALSE ;
END_IF ;
__EDTB25 := R_TRIG_2.Q ;
IF __EDTB25 THEN
(*Set coil*)
_IO_X1_DO_03 := TRUE ;
END_IF ;
__EDTB26 := R_TRIG_2.Q ;
IF __EDTB26 THEN
(*Reset coil*)
_IO_X1_DO_02 := FALSE ;
END_IF ;
__EDTB27 := R_TRIG_2.Q ;
IF __EDTB27 THEN
(*Set coil*)
_IO_X1_DO_07 := TRUE ;
END_IF ;
__EDTB28 := R_TRIG_2.Q ;
IF __EDTB28 THEN
(*Reset coil*)
_IO_X1_DO_06 := FALSE ;
END_IF ;
__EDTB29 := R_TRIG_2.Q ;
IF __EDTB29 THEN
(*Set coil*)
_IO_X1_DO_09 := TRUE ;
END_IF ;
__EDTB30 := R_TRIG_2.Q ;
IF __EDTB30 THEN
(*Reset coil*)
_IO_X1_DO_08 := FALSE ;
END_IF ;
__EDTB31 := R_TRIG_2.Q ;
IF __EDTB31 THEN
(*Set coil*)
_IO_X1_DO_13 := TRUE ;
END_IF ;
__EDTB32 := R_TRIG_2.Q ;
IF __EDTB32 THEN
(*Reset coil*)
_IO_X1_DO_12 := FALSE ;
END_IF ;
__EDTB33 := R_TRIG_2.Q ;
IF __EDTB33 THEN
(*Set coil*)
_IO_X1_DO_15 := TRUE ;
END_IF ;
__EDTB34 := R_TRIG_2.Q ;
IF __EDTB34 THEN
(*Reset coil*)
_IO_X1_DO_14 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)

