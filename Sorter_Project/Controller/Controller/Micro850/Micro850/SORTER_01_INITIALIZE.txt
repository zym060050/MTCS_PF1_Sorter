(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB1 := __SYSVA_FIRST_SCAN ;
IF __EDTB1 THEN
(*Reset coil*)
B_SYS_INITIALIZED := FALSE ;
END_IF ;
__EDTB2 := __SYSVA_FIRST_SCAN ;
IF __EDTB2 THEN
(*Reset coil*)
HMI_STARTEXECUTEMOTION := FALSE ;
END_IF ;
__EDTB3 := __SYSVA_FIRST_SCAN ;
IF __EDTB3 THEN
(*Reset coil*)
HMI_VIS_START := FALSE ;
END_IF ;
__EDTB4 := __SYSVA_FIRST_SCAN ;
IF __EDTB4 THEN
(*Reset coil*)
HMI_STOP := FALSE ;
END_IF ;
__EDTB5 := __SYSVA_FIRST_SCAN ;
IF __EDTB5 THEN
(*Reset coil*)
HMI_VIS_STOP := FALSE ;
END_IF ;
__EDTB6 := __SYSVA_FIRST_SCAN ;
IF __EDTB6 THEN
(*Reset coil*)
HMI_MOVEFWD := FALSE ;
END_IF ;
__EDTB7 := __SYSVA_FIRST_SCAN ;
IF __EDTB7 THEN
(*Reset coil*)
HMI_IND_FWDDIR := FALSE ;
END_IF ;
__EDTB8 := __SYSVA_FIRST_SCAN ;
IF __EDTB8 THEN
(*Reset coil*)
HMI_VIS_FWD := FALSE ;
END_IF ;
__EDTB9 := __SYSVA_FIRST_SCAN ;
IF __EDTB9 THEN
(*Reset coil*)
HMI_MOVEREV := FALSE ;
END_IF ;
__EDTB10 := __SYSVA_FIRST_SCAN ;
IF __EDTB10 THEN
(*Reset coil*)
HMI_IND_REVDIR := FALSE ;
END_IF ;
__EDTB11 := __SYSVA_FIRST_SCAN ;
IF __EDTB11 THEN
(*Reset coil*)
HMI_VIS_REV := FALSE ;
END_IF ;
__EDTB12 := __SYSVA_FIRST_SCAN ;
IF __EDTB12 THEN
HMI_DUTYCYCLECONVEYORS := (  CONST_DEFAULT_DC_CONVEYORS) ;
END_IF ;
__MO_1GAIN_1 := __EDTB12 ;
__EDTB13 := __EDTB12 ;
__EDTB14 := __SYSVA_FIRST_SCAN ;
IF __EDTB14 THEN
HMI_DUTYCYCLESORTERS := (  CONST_DEFAULT_DC_SORTERS) ;
END_IF ;
__MO_1GAIN_2 := __EDTB14 ;
__EDTB15 := __EDTB14 ;
__EDTB16 := __SYSVA_FIRST_SCAN ;
IF __EDTB16 THEN
(*Set coil*)
HMI_VIS_INIT := TRUE ;
END_IF ;
__EDTB17 := __SYSVA_FIRST_SCAN ;
IF __EDTB17 THEN
(*Reset coil*)
HMI_INITENABLEPOWER := FALSE ;
END_IF ;
__EDTB18 := __SYSVA_FIRST_SCAN ;
IF __EDTB18 THEN
(*Reset coil*)
B_AXIS1_POWERED := FALSE ;
END_IF ;
__EDTB19 := __SYSVA_FIRST_SCAN ;
IF __EDTB19 THEN
(*Reset coil*)
B_AXIS2_POWERED := FALSE ;
END_IF ;
__EDTB20 := __SYSVA_FIRST_SCAN ;
IF __EDTB20 THEN
(*Reset coil*)
B_AXIS3_POWERED := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,22
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB21 := TRUE ;
IF __EDTB21 THEN
(* FB call: MC_Power *)
MC_Power_1(AXIS1, HMI_INITENABLEPOWER, TRUE, TRUE, 0) ;
END_IF ;
__MO_MC_POWER_1 := __EDTB21 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,30
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB22 := TRUE ;
IF __EDTB22 THEN
(* FB call: MC_Power *)
MC_Power_2(AXIS2, HMI_INITENABLEPOWER, TRUE, TRUE, 0) ;
END_IF ;
__MO_MC_POWER_2 := __EDTB22 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,38
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB23 := TRUE ;
IF __EDTB23 THEN
(* FB call: MC_Power *)
MC_Power_3(AXIS3, HMI_INITENABLEPOWER, TRUE, TRUE, 0) ;
END_IF ;
__MO_MC_POWER_3 := __EDTB23 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,46
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB24 := TRUE ;
IF __EDTB24 THEN
B_AXIS1_POWERED := (  MC_POWER_1.STATUS) ;
END_IF ;
__MO_1GAIN_3 := __EDTB24 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,49
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB25 := TRUE ;
IF __EDTB25 THEN
B_AXIS2_POWERED := (  MC_POWER_2.STATUS) ;
END_IF ;
__MO_1GAIN_4 := __EDTB25 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,52
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB26 := TRUE ;
IF __EDTB26 THEN
B_AXIS3_POWERED := (  MC_POWER_3.STATUS) ;
END_IF ;
__MO_1GAIN_5 := __EDTB26 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,55
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB27 := B_AXIS1_POWERED AND B_AXIS2_POWERED AND B_AXIS3_POWERED ;
__EDTB28 := __EDTB27 ;
IF __EDTB28 THEN
(*Set coil*)
B_SYS_INITIALIZED := TRUE ;
END_IF ;
__EDTB29 := __EDTB27 ;
IF __EDTB29 THEN
(*Reset coil*)
HMI_VIS_INIT := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,58
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: R_TRIG *)
R_TRIG_1(B_SYS_INITIALIZED) ;
__EDTB30 := R_TRIG_1.Q ;
IF __EDTB30 THEN
(*Set coil*)
HMI_VIS_START := TRUE ;
END_IF ;
__EDTB31 := R_TRIG_1.Q ;
IF __EDTB31 THEN
(*Set coil*)
HMI_VIS_FWD := TRUE ;
END_IF ;
__EDTB32 := R_TRIG_1.Q ;
IF __EDTB32 THEN
(*Set coil*)
HMI_VIS_REV := TRUE ;
END_IF ;
__EDTB33 := R_TRIG_1.Q ;
IF __EDTB33 THEN
(*Set coil*)
HMI_MOVEFWD := TRUE ;
END_IF ;
__EDTB34 := R_TRIG_1.Q ;
IF __EDTB34 THEN
(*Set coil*)
HMI_IND_FWDDIR := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __EDTB34 *)

