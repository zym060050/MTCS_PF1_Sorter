(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: R_TRIG *)
R_TRIG_1(B_SYS_INITIALIZED AND _IO_EM_DI_12) ;
__EDTB1 := R_TRIG_1.Q ;
IF __EDTB1 THEN
(*Set coil*)
_IO_EM_DO_11 := TRUE ;
END_IF ;
__EDTB2 := R_TRIG_1.Q ;
IF __EDTB2 THEN
COUNTER_SHORT_R := (COUNTER_SHORT_R + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB2 ;
__EDTB3 := __EDTB2 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,6
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB4 := B_SYS_INITIALIZED AND NOT(_IO_EM_DI_12) ;
IF __EDTB4 THEN
(*Reset coil*)
_IO_EM_DO_11 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,8
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB5 := B_SYS_INITIALIZED AND _IO_EM_DI_14 ;
IF __EDTB5 THEN
(*Set coil*)
_IO_EM_DO_07 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,10
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB6 := B_SYS_INITIALIZED AND NOT(_IO_EM_DI_14) ;
IF __EDTB6 THEN
(*Reset coil*)
_IO_EM_DO_07 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,12
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB7 := B_SYS_INITIALIZED AND _IO_EM_DI_13 ;
IF __EDTB7 THEN
(*Set coil*)
_IO_EM_DO_09 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,14
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB8 := B_SYS_INITIALIZED AND NOT(_IO_EM_DI_13) ;
IF __EDTB8 THEN
(*Reset coil*)
_IO_EM_DO_09 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB9 := B_SYS_INITIALIZED AND _IO_EM_DI_15 ;
IF __EDTB9 THEN
(*Set coil*)
_IO_EM_DO_17 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,18
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := B_SYS_INITIALIZED AND NOT(_IO_EM_DI_15) ;
IF __EDTB10 THEN
(*Reset coil*)
_IO_EM_DO_17 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,20
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB11 := B_SYS_INITIALIZED AND _IO_EM_DI_17 ;
IF __EDTB11 THEN
(*Set coil*)
_IO_EM_DO_13 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,22
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB12 := B_SYS_INITIALIZED AND NOT(_IO_EM_DI_17) ;
IF __EDTB12 THEN
(*Reset coil*)
_IO_EM_DO_13 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB13 := B_SYS_INITIALIZED AND NOT(_IO_EM_DI_16) ;
IF __EDTB13 THEN
(*Reset coil*)
_IO_EM_DO_15 := FALSE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,26
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB14 := B_SYS_INITIALIZED AND _IO_EM_DI_16 ;
IF __EDTB14 THEN
(*Set coil*)
_IO_EM_DO_15 := TRUE ;
END_IF ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,28
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB15 := TRUE ;
IF __EDTB15 THEN
LOCAL_AXIS_2_MC_CTL.MC_POWERED := (  B_SYS_INITIALIZED) ;
END_IF ;
__MO_1GAIN_1 := __EDTB15 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,31
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB16 := TRUE ;
IF __EDTB16 THEN
LOCAL_AXIS_2_MC_CTL.DUTY_CYCLE := (  HMI_DUTYCYCLESORTERS) ;
END_IF ;
__MO_1GAIN_2 := __EDTB16 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,34
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := TRUE ;
IF __EDTB17 THEN
LOCAL_AXIS_2_MC_CTL.EXEC_MOTION := (  HMI_STARTEXECUTEMOTION) ;
END_IF ;
__MO_1GAIN_3 := __EDTB17 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,37
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB18 := TRUE ;
IF __EDTB18 THEN
(* FB call: UDFB_EXEC_MOTION *)
UDFB_EXEC_MOTION_1(LOCAL_AXIS_2_MC_CTL, AXIS2) ;
END_IF ;
__MO_UDFB_EXEC_MOTION_1 := __EDTB18 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,41
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB19 := TRUE ;
IF __EDTB19 THEN
(* FB call: MC_Halt *)
MC_Halt_1(AXIS2, HMI_STOP, 5000.0, 0.0, ) ;
END_IF ;
__MO_MC_HALT_1 := __EDTB19 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)

